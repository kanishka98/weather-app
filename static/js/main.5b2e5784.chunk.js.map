{"version":3,"sources":["logo.svg","components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,kC,2ICU5BC,G,MAPD,kBACb,6BACC,wBAAIC,UAAU,0BAAd,kBACA,wBAAIA,UAAU,6BAAd,mDCOaC,EATF,SAAAC,GAAK,OACN,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAM,OAAOC,KAAK,OAAOC,YAAY,YAC5C,2BAAOF,KAAM,OAAOC,KAAK,UAAUC,YAAY,eAC/C,iDCsBDC,EA5BC,SAAAN,GAAK,OACpB,yBAAKF,UAAU,iBAEbE,EAAMO,MAAQP,EAAMQ,SAAW,uBAAGV,UAAU,gBAAb,aAC9B,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMO,KAA1C,KAAoDP,EAAMQ,UAI3DR,EAAMS,aAAe,uBAAGX,UAAU,gBAAb,gBACpB,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMS,YAA1C,MAIDT,EAAMU,UAAY,uBAAGZ,UAAU,gBAAb,aACjB,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMU,SAA1C,MAIDV,EAAMW,aAAe,uBAAGb,UAAU,gBAAb,eACpB,0BAAMA,UAAU,kBAAhB,IAAoCE,EAAMW,YAA1C,MAIDX,EAAMY,OAAS,uBAAGd,UAAU,kBAAmBE,EAAMY,SCnBlDC,EAAU,mCAqEDC,E,4MAlEbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAETd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAH/B,SAIYC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,kBAJjB,cAILW,EAJK,gBAKQA,EAASC,OALjB,OAKLC,EALK,OAMXC,QAAQC,IAAIF,GACTnB,GAAQC,EACT,EAAKqB,SAAS,CACZpB,YAAaiB,EAAKI,KAAKC,KACvBxB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKM,IAAIxB,QAClBE,SAAUgB,EAAKI,KAAKpB,SACpBC,YAAae,EAAKO,QAAQ,GAAGtB,YAC7BC,MAAO,KAIT,EAAKiB,SAAS,CACZpB,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,4BAxBA,4C,6GA6BX,OACE,6BACE,yBAAKd,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMI,WAAYgC,KAAKhC,aACvB,kBAAC,EAAD,CACEO,YAAayB,KAAKnB,MAAMN,YACxBC,SAAUwB,KAAKnB,MAAML,SACrBH,KAAM2B,KAAKnB,MAAMR,KACjBC,QAAS0B,KAAKnB,MAAMP,QACpBG,YAAauB,KAAKnB,MAAMJ,YACxBC,MAAOsB,KAAKnB,MAAMH,kB,GAxDpBuB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLe,QAAQf,MAAMA,EAAM0C,a","file":"static/js/main.5b2e5784.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nimport React from \"react\";\r\n\r\nconst Title = () => (\r\n\t<div>\r\n\t\t<h1 className=\"title-container__title\">Weather Finder</h1>\r\n\t\t<h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n\t</div>\r\n);\r\n\r\nexport default Title;","import React from 'react';\r\n\r\n\r\n\r\nconst Form = props => (\r\n            <form onSubmit={props.getWeather}>\r\n                <input type =\"text\" name=\"city\" placeholder=\"City...\"/>\r\n                <input type =\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n                <button>Get Weather</button>\r\n            </form>\r\n);\r\n\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n\t<div className=\"weather__info\">\r\n\t {\t\r\n\t \tprops.city && props.country && <p className=\"weather__key\"> Location: \r\n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.temperature && <p className=\"weather__key\"> Temperature: \r\n\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.humidity && <p className=\"weather__key\"> Humidity: \r\n\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.description && <p className=\"weather__key\"> Conditions: \r\n\t \t\t<span className=\"weather__value\"> { props.description } </span>\r\n\t </p> \r\n\t }\r\n\t { \r\n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>  \r\n\t }\r\n\t</div>\r\n);\r\n\r\nexport default Weather;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Title  from './components/Title';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nconst API_KEY = \"19c88e7c0c7dbf0138bae138c2593de1\";\nclass App extends React.Component{\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    console.log(data);\n    if(city && country){\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    }\n    else{\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values\"\n      });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Title />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather \n                    temperature={this.state.temperature} \n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}